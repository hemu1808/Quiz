{
  "html": {
    "title": "Learn HTML",
    "content": [
      "HTML stands for HyperText Markup Language.",
      "HTML is the standard markup language for creating web pages.",
      "HTML documents are made up of elements enclosed in tags like <html>, <head>, <body>.",
      "The <title> tag defines the title shown on browser tabs.",
      "The <meta> tag provides metadata like charset, author, and viewport settings.",
      "The <h1> to <h6> tags define headings with decreasing importance.",
      "The <p> tag defines a paragraph.",
      "The <a> tag is used to create hyperlinks with the 'href' attribute.",
      "The <img> tag embeds images using the 'src' and 'alt' attributes.",
      "The <div> tag defines a generic container for styling/layout.",
      "The <span> tag is an inline container for styling.",
      "HTML uses semantic tags like <section>, <article>, <nav>, <header>, and <footer> for better structure.",
      "The <ul>, <ol>, and <li> tags are used for unordered and ordered lists.",
      "The <form> element is used to collect user input.",
      "The <input> tag supports multiple types: text, password, email, number, radio, checkbox, etc.",
      "The <label> tag is used for accessibility and form association.",
      "The <button> tag creates clickable buttons.",
      "HTML5 introduced the <audio> and <video> tags for media playback.",
      "The <canvas> element allows rendering graphics via JavaScript.",
      "The <table> element represents tabular data using <tr>, <th>, and <td>.",
      "The 'alt' attribute improves accessibility and SEO for images.",
      "The <iframe> tag embeds another HTML page within the current page.",
      "Global attributes like 'id', 'class', 'style', and 'title' apply to most HTML tags.",
      "HTML documents must follow a strict nesting hierarchy.",
      "HTML5 is backward compatible and includes features for modern web development."
    ]
  },
  "css": {
    "title": "Learn CSS",
    "content": [
      "CSS stands for Cascading Style Sheets.",
      "CSS styles HTML elements with properties like color, padding, margin, etc.",
      "There are three ways to apply CSS: inline, internal (style tag), and external (linked file).",
      "CSS follows a cascade where later styles override earlier ones.",
      "The box model includes margin, border, padding, and content.",
      "The 'display' property controls layout: block, inline, inline-block, flex, grid, none.",
      "Positioning types include static, relative, absolute, fixed, and sticky.",
      "The 'z-index' property controls element stacking order.",
      "Colors can be defined using names, HEX, RGB, HSL.",
      "The 'font-family' property sets the font of text.",
      "Units include px, em, rem, %, vh, vw.",
      "Media queries enable responsive design based on screen size.",
      "Flexbox is a 1D layout model with main and cross axes.",
      "Grid is a 2D layout system using rows and columns.",
      "Pseudo-classes like :hover, :focus, :nth-child() style specific states.",
      "Pseudo-elements like ::before and ::after insert virtual elements.",
      "The 'transition' property allows smooth animations on change.",
      "The 'transform' property can rotate, scale, or move elements.",
      "The 'opacity' property sets transparency.",
      "CSS variables (custom properties) use --var-name and var(--var-name).",
      "Specificity determines which styles are applied.",
      "The !important flag overrides all other declarations.",
      "SCSS and LESS are CSS preprocessors with variables, mixins, and nesting.",
      "Animations can be done with @keyframes and the animation property.",
      "CSS improves accessibility when used with semantic HTML."
    ]
  },
  "javascript": {
    "title": "Learn JavaScript",
    "content": [
      "JavaScript is a high-level, interpreted scripting language used for dynamic content.",
      "JS runs in the browser and enables interactivity like form validation and animation.",
      "Variables can be declared using var (function scoped), let (block scoped), or const (block scoped).",
      "Data types include string, number, boolean, null, undefined, object, symbol, bigint.",
      "Control structures include if, else, switch, for, while, do-while.",
      "Functions can be declared, expressed, or arrow functions (ES6).",
      "Functions can accept parameters and return values.",
      "JavaScript objects are collections of key-value pairs.",
      "Arrays store ordered collections and offer methods like map, filter, reduce.",
      "The DOM (Document Object Model) allows dynamic manipulation of HTML.",
      "Event listeners attach interactivity using addEventListener().",
      "The 'this' keyword refers to the context and behaves differently in arrow functions.",
      "JavaScript is single-threaded but supports async behavior via the event loop.",
      "Promises represent asynchronous results and support .then(), .catch().",
      "Async/await syntax provides cleaner handling of asynchronous code.",
      "JSON (JavaScript Object Notation) is used for data exchange.",
      "ES6 introduced let/const, arrow functions, classes, template literals, destructuring.",
      "The 'typeof' operator checks the type of a variable.",
      "JavaScript can be used with APIs to fetch data from servers.",
      "Closures allow inner functions to access outer scope variables.",
      "Hoisting lifts variable and function declarations to the top of their scope.",
      "Truthy and falsy values affect conditional expressions.",
      "JavaScript engines (like V8) compile and execute JS code.",
      "Modern JS uses modules with import/export.",
      "JavaScript is used with frameworks like React, Angular, Vue."
    ]
  },
  "react": {
    "title": "Learn React",
    "content": [
      "React is a JavaScript library for building user interfaces.",
      "React uses components to create reusable UI blocks.",
      "JSX allows writing HTML-like syntax in JavaScript.",
      "Functional components are simpler and use hooks for state and effects.",
      "Class components use constructors, lifecycle methods, and 'this'.",
      "State holds local data and can be managed using useState().",
      "Props are read-only values passed from parent to child components.",
      "React uses a virtual DOM for fast UI updates.",
      "useEffect handles side effects like data fetching and subscriptions.",
      "React Router enables navigation using <Routes>, <Route>, and <Link>.",
      "Forms are managed using controlled inputs and useState.",
      "React Context provides global state without prop drilling.",
      "Custom hooks allow reuse of logic across components.",
      "React supports lazy loading with React.lazy and Suspense.",
      "React keys help identify which items have changed in a list.",
      "React.memo prevents unnecessary re-renders of pure components.",
      "React portals render components outside the main DOM hierarchy.",
      "Refs allow direct DOM access using useRef.",
      "Error boundaries catch JavaScript errors in child components.",
      "Redux is a state management library often used with React.",
      "Server-side rendering (SSR) can be done with Next.js.",
      "React's rendering is declarative â€” it updates UI based on state changes.",
      "StrictMode helps detect problems in development.",
      "React 18 introduces concurrent rendering and automatic batching.",
      "React encourages a component-driven design architecture."
    ]
  },
  "typescript": {
    "title": "Learn TypeScript",
    "content": [
      "TypeScript is a statically typed superset of JavaScript.",
      "TS helps catch errors at compile time via type checking.",
      "Use 'tsc' to compile .ts files to .js.",
      "Variables can have explicit types: string, number, boolean, etc.",
      "Interfaces define object shapes with optional and readonly properties.",
      "Type aliases provide readable shorthand for complex types.",
      "Enums define named constants (numeric or string).",
      "Functions have typed parameters and return types.",
      "Tuples define fixed-length arrays with known types.",
      "Generics enable functions and classes to work with any type.",
      "Union types accept multiple types (e.g., string | number).",
      "Intersection types combine multiple types.",
      "Literal types restrict values to specific options.",
      "Type assertions override inferred types.",
      "The 'any' type disables type checking.",
      "The 'unknown' type is safer than 'any'.",
      "The 'never' type indicates a function never returns.",
      "Modules use import/export syntax.",
      "Type narrowing refines types based on conditionals.",
      "Mapped types create new types based on existing ones.",
      "Type guards check type at runtime (e.g., typeof, instanceof).",
      "The keyof operator retrieves object keys as types.",
      "Partial, Required, Readonly, and Record are utility types.",
      "TS supports declaration files (.d.ts) for JS libraries.",
      "TypeScript integrates well with modern IDEs for autocompletion and refactoring."
    ]
  },
  "nodejs": {
    "title": "Learn Node.js",
    "content": [
      "Node.js is a runtime that executes JavaScript on the server.",
      "Node.js uses V8 JavaScript engine from Chrome.",
      "It follows an event-driven, non-blocking I/O model.",
      "npm is the default package manager for Node.js.",
      "Modules can be CommonJS (require) or ES6 (import).",
      "Built-in modules include fs, path, http, url, os, events.",
      "The fs module reads and writes files asynchronously or synchronously.",
      "The http module creates web servers.",
      "The path module handles file paths.",
      "Events are handled with EventEmitter.",
      "The process module gives access to environment variables.",
      "Asynchronous code uses callbacks, promises, or async/await.",
      "Express is a minimal and flexible Node.js web framework.",
      "Middleware functions process requests in Express.",
      "Routing in Express defines URL handlers.",
      "The body-parser middleware parses JSON/form data.",
      "CORS enables cross-origin requests.",
      "Error handling is centralized using middleware.",
      "Environment variables are stored using dotenv.",
      "Logging can be done with morgan or winston.",
      "MongoDB is often used with Node via mongoose.",
      "Authentication can be implemented with JWT or Passport.js.",
      "You can create REST APIs with CRUD operations.",
      "Node.js is used for real-time apps with WebSocket or Socket.IO.",
      "Node is ideal for microservices and serverless functions."
    ]
  },
  "dsa": {
    "title": "Learn Data Structures & Algorithms",
    "content": [
      "DSA stands for Data Structures and Algorithms.",
      "Arrays are fixed-size linear collections with indexed access.",
      "Linked Lists store nodes with pointers â€” singly, doubly, or circular.",
      "Stacks are LIFO (Last In First Out) structures.",
      "Queues are FIFO (First In First Out) structures.",
      "Hash Tables provide average O(1) access time using keys.",
      "Trees are hierarchical structures; binary trees, BSTs, and heaps are common.",
      "Binary Search Trees (BST) maintain order in nodes.",
      "Heaps (min/max) are used in priority queues.",
      "Graphs represent nodes connected via edges â€” directed or undirected.",
      "Depth-First Search (DFS) explores deeply via recursion/stack.",
      "Breadth-First Search (BFS) explores level-by-level via queue.",
      "Sorting algorithms: bubble, selection, insertion, merge, quick, heap.",
      "Merge sort and quick sort offer O(n log n) complexity.",
      "Searching algorithms include linear search and binary search.",
      "Recursion solves problems by calling functions within themselves.",
      "Dynamic Programming (DP) solves overlapping subproblems with memoization.",
      "Greedy algorithms build solutions step-by-step, locally optimal at each step.",
      "Backtracking explores all possibilities recursively.",
      "Time complexity estimates execution time with Big-O notation.",
      "Space complexity estimates memory usage.",
      "O(1), O(log n), O(n), O(n log n), O(nÂ²) are common complexities.",
      "Bit manipulation uses AND, OR, XOR, SHIFT for performance tricks.",
      "Trie is a tree-like data structure for strings and dictionaries.",
      "Practice on LeetCode, HackerRank, and Codeforces improves DSA skills."
    ]
  }
}
